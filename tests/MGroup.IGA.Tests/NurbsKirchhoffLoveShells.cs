using System;
using System.Linq;
using MathNet.Numerics.Data.Matlab;
using MathNet.Numerics.LinearAlgebra;
using MGroup.Analyzers.NonLinear;
using MGroup.IGA.Entities.Loads;
using MGroup.IGA.Postprocessing;
using MGroup.MSolve.Logging;

namespace MGroup.IGA.Tests
{
	using System.Collections.Generic;
	using System.Globalization;
	using System.IO;
	using MGroup.Analyzers;
	using MGroup.IGA.Elements;
	using MGroup.IGA.Entities;
	using MGroup.IGA.Readers;
	using MGroup.LinearAlgebra.Matrices;
	using MGroup.LinearAlgebra.Vectors;
	using MGroup.Materials;
	using MGroup.MSolve.Discretization;
	using MGroup.MSolve.Discretization.FreedomDegrees;
	using MGroup.MSolve.Discretization.Loads;
	using MGroup.Problems;
	using MGroup.Solvers;
	using MGroup.Solvers.Direct;
	using Xunit;

	public class NurbsKirchhoffLoveShells
	{
		private List<ControlPoint> ElementControlPoints()
		{
			return new List<ControlPoint>
			{
				new ControlPoint {ID = 0, X = 0.0, Y =  0.0, Z = 0.0, WeightFactor = 1.0},
				new ControlPoint {ID = 1, X = 0.0, Y =  0.5, Z = 0.0, WeightFactor = 1.0},
				new ControlPoint {ID = 2, X = 0.0, Y =  1.0, Z = 0.0, WeightFactor = 1.0},
				new ControlPoint {ID = 3, X = 16.66666667, Y =  0.0, Z = 0.0, WeightFactor = 1.0},
				new ControlPoint {ID = 4, X = 16.66666667, Y =  0.5, Z = 0.0, WeightFactor = 1.0},
				new ControlPoint {ID = 5, X = 16.66666667, Y =  1.0, Z = 0.0, WeightFactor = 1.0},
				new ControlPoint {ID = 6, X = 33.33333333, Y =  0.0, Z = 0.0, WeightFactor = 1.0},
				new ControlPoint {ID = 7, X = 33.33333333, Y =  0.5, Z = 0.0, WeightFactor = 1.0},
				new ControlPoint {ID = 8, X = 33.33333333, Y =  1.0, Z = 0.0, WeightFactor = 1.0},
				new ControlPoint {ID = 9, X = 50.0, Y =  0.0, Z = 0.0, WeightFactor = 1.0},
				new ControlPoint {ID = 10, X = 50.0, Y =  0.5, Z = 0.0, WeightFactor = 1.0},
				new ControlPoint {ID = 11, X = 50.0, Y =  1.0, Z = 0.0, WeightFactor = 1.0},
			};
		}

		private List<Knot> ElementKnot()
		{
			return new List<Knot>()
			{
				new Knot() {ID = 0, Ksi = 0.0, Heta = 0.0, Zeta = 0.0},
				new Knot() {ID = 1, Ksi = 0.0, Heta = 1.0, Zeta = 0.0},
				new Knot() {ID = 2, Ksi = 1.0, Heta = 0.0, Zeta = 0.0},
				new Knot() {ID = 3, Ksi = 1.0, Heta = 1.0, Zeta = 0.0}
			};
		}

		private Vector KnotValueVectorKsi()
		{
			return Vector.CreateFromArray(new double[8]
			{
				0, 0, 0, 0, 1, 1, 1, 1
			});
		}

		private Vector KnotValueVectorHeta()
		{
			return Vector.CreateFromArray(new double[6]
			{
				0, 0, 0, 1, 1, 1
			});
		}

		private NurbsKirchhoffLoveShellElement Element
		{
			get
			{
				var element = new NurbsKirchhoffLoveShellElement();
				var patch = new Patch();
				patch.Material = new ElasticMaterial2D(StressState2D.PlaneStrain)
				{
					YoungModulus = 100,
					PoissonRatio = 0.0
				};
				foreach (var controlPoint in ElementControlPoints())
					element.ControlPointsDictionary.Add(controlPoint.ID, controlPoint);
				foreach (var knot in ElementKnot())
					element.KnotsDictionary.Add(knot.ID, knot);
				patch.Thickness = 1;
				patch.DegreeKsi = 3;
				patch.DegreeHeta = 2;
				patch.NumberOfControlPointsHeta = 3;
				patch.KnotValueVectorKsi = KnotValueVectorKsi();
				patch.KnotValueVectorHeta = KnotValueVectorHeta();
				element.Patch = patch;
				return element;
			}
		}

		private readonly Matrix _expectedStiffnessMatrix = Matrix.CreateFromArray(new double[36, 36]
		{
			{
				476.9104762300273, 12.500000000000012, 0.0, -237.7352381150549, 8.333333333333337, 0.0,
				-237.97523811504095, 4.166666666666667, 0.0, 237.73523809556187, -7.500000000000006, 0.0,
				-119.2276190477295, -4.999999999999999, 0.0, -119.10761904774655, -2.5000000000000004, 0.0,
				94.99809523305787, -3.750000000000005, 0.0, -47.73904761653239, -2.5000000000000013, 0.0,
				-47.6590476165312, -1.2500000000000007, 0.0, 23.68952380802038, -1.250000000000001, 0.0,
				-11.964761904017053, -0.8333333333333335, 0.0, -11.924761904014751, -0.4166666666666668, 0.0
			},
			{
				12.50000000000001, 952.740952460116, 0.0, -8.333333333333346, -476.010476230079, 0.0,
				-4.166666666666668, -476.1304762300716, 0.0, 7.500000000000005, 476.0104761910465, 0.0,
				-5.000000000000006, -238.18523809549762, 0.0, -2.500000000000001, -238.12523809550598, 0.0,
				3.7500000000000036, 190.35619046612086, 0.0, -2.5000000000000036, -95.2980952330622, 0.0,
				-1.2500000000000004, -95.25809523306152, 0.0, 1.250000000000001, 47.559047616051025, 0.0,
				-0.8333333333333345, -23.83952380802895, 0.0, -0.41666666666666663, -23.819523808027782, 0.0
			},
			{
				0.0, 0.0, 238.8953981149884, 0.0, 0.0, -476.5903962300457, 0.0, 0.0, 237.69526478172372, 0.0, 0.0,
				118.64737904781246, 0.0, 0.0, -237.89535809553882, 0.0, 0.0, 119.24757904772663, 0.0, 0.0,
				47.35238094986011, 0.0, 0.0, -95.10476189972607, 0.0, 0.0, 47.75238094986587, 0.0, 0.0,
				11.77150857067266, 0.0, 0.0, -23.74281714135675, 0.0, 0.0, 11.971441904017421
			},
			{
				-237.7352381150549, -8.333333333333346, 0.0, 476.67047623004134, -3.400108834891377E-16, 0.0,
				-237.7352381150549, 8.333333333333346, 0.0, -119.2276190477295, 5.000000000000005, 0.0,
				237.85523809554485, 1.3170345890267665E-16, 0.0, -119.22761904772952, -5.000000000000006, 0.0,
				-47.739047616532375, 2.500000000000003, 0.0, 95.07809523305905, 1.3964523981613297E-16, 0.0,
				-47.739047616532396, -2.500000000000003, 0.0, -11.96476190401705, 0.8333333333333344, 0.0,
				23.72952380802267, 1.3986208025063007E-17, 0.0, -11.96476190401705, -0.8333333333333344, 0.0
			},
			{
				8.333333333333337, -476.01047623007895, 0.0, 6.626592856254568E-16, 952.6209524601236, 0.0,
				-8.333333333333336, -476.01047623007895, 0.0, 5.000000000000002, -238.18523809549762, 0.0,
				4.023474262093707E-16, 476.07047619103815, 0.0, -5.000000000000003, -238.18523809549768, 0.0,
				2.5000000000000013, -95.29809523306223, 0.0, 8.304988641238964E-17, 190.39619046612162, 0.0,
				-2.500000000000001, -95.29809523306223, 0.0, 0.8333333333333333, -23.839523808028954, 0.0,
				3.469446951953614E-17, 47.5790476160522, 0.0, -0.8333333333333334, -23.839523808028957, 0.0
			},
			{
				0.0, 0.0, -476.5903962300457, 0.0, 0.0, 953.1810591267578, 0.0, 0.0, -476.5903962300457, 0.0, 0.0,
				-237.89535809553885, 0.0, 0.0, 475.790316191078, 0.0, 0.0, -237.89535809553885, 0.0, 0.0,
				-95.10476189972609, 0.0, 0.0, 190.209523799452, 0.0, 0.0, -95.10476189972609, 0.0, 0.0,
				-23.74281714135675, 0.0, 0.0, 47.48576761604683, 0.0, 0.0, -23.74281714135675
			},
			{
				-237.97523811504095, -4.166666666666669, 0.0, -237.7352381150549, -8.333333333333336, 0.0,
				476.91047623002726, -12.500000000000009, 0.0, -119.10761904774657, 2.4999999999999996, 0.0,
				-119.22761904772953, 4.999999999999998, 0.0, 237.73523809556184, 7.500000000000007, 0.0,
				-47.6590476165312, 1.2500000000000004, 0.0, -47.7390476165324, 2.5000000000000004, 0.0,
				94.99809523305788, 3.7500000000000044, 0.0, -11.924761904014753, 0.41666666666666674, 0.0,
				-11.964761904017053, 0.8333333333333337, 0.0, 23.68952380802038, 1.250000000000001, 0.0
			},
			{
				4.166666666666667, -476.1304762300716, 0.0, 8.333333333333348, -476.01047623007895, 0.0,
				-12.500000000000009, 952.7409524601159, 0.0, 2.5000000000000004, -238.12523809550598, 0.0,
				5.000000000000006, -238.18523809549762, 0.0, -7.500000000000005, 476.0104761910465, 0.0,
				1.2500000000000004, -95.25809523306152, 0.0, 2.500000000000003, -95.2980952330622, 0.0,
				-3.750000000000003, 190.35619046612086, 0.0, 0.4166666666666666, -23.819523808027782, 0.0,
				0.8333333333333345, -23.839523808028957, 0.0, -1.250000000000001, 47.559047616051025, 0.0
			},
			{
				0.0, 0.0, 237.69526478172372, 0.0, 0.0, -476.5903962300457, 0.0, 0.0, 238.89539811498847, 0.0, 0.0,
				119.24757904772665, 0.0, 0.0, -237.89535809553885, 0.0, 0.0, 118.64737904781246, 0.0, 0.0,
				47.75238094986587, 0.0, 0.0, -95.10476189972609, 0.0, 0.0, 47.35238094986011, 0.0, 0.0,
				11.971441904017421, 0.0, 0.0, -23.74281714135675, 0.0, 0.0, 11.771508570672662
			},
			{
				237.73523809556187, 7.500000000000005, 0.0, -119.2276190477295, 5.000000000000002, 0.0,
				-119.10761904774655, 2.5000000000000004, 0.0, 286.19428569914965, 1.721713049906981E-16, 0.0,
				-142.6171428496091, -1.7271340607694086E-16, 0.0, -142.77714284959762, -2.441623292437356E-16, 0.0,
				214.4057142722313, -3.7500000000000036, 0.0, -107.08285713612945, -2.500000000000001, 0.0,
				-107.12285713612478, -1.2500000000000004, 0.0, 94.99809523305787, -3.7500000000000036, 0.0,
				-47.73904761653239, -2.5000000000000004, 0.0, -47.65904761653119, -1.2500000000000002, 0.0
			},
			{
				-7.500000000000006, 476.0104761910465, 0.0, 5.000000000000007, -238.18523809549762, 0.0,
				2.4999999999999996, -238.12523809550598, 0.0, 2.8319360745321376E-16, 571.6685713983505, 0.0,
				-2.96827449772219E-16, -285.59428569919254, 0.0, -2.88560408207017E-16, -285.6742856991866, 0.0,
				3.750000000000003, 428.6314285444833, 0.0, -2.5000000000000036, -214.2557142722486, 0.0, -1.25,
				-214.2757142722461, 0.0, 3.7500000000000036, 190.3561904661209, 0.0, -2.500000000000004,
				-95.29809523306223, 0.0, -1.25, -95.25809523306152, 0.0
			},
			{
				0.0, 0.0, 118.64737904781248, 0.0, 0.0, -237.89535809553888, 0.0, 0.0, 119.24757904772665, 0.0, 0.0,
				143.390956182887, 0.0, 0.0, -285.98071236583155, 0.0, 0.0, 142.59055618294428, 0.0, 0.0,
				107.2759504694407, 0.0, 0.0, -214.35250093890406, 0.0, 0.0, 107.07615046946349, 0.0, 0.0,
				47.35238094986013, 0.0, 0.0, -95.10476189972606, 0.0, 0.0, 47.75238094986587
			},
			{
				-119.22761904772949, -5.000000000000005, 0.0, 237.85523809554485, 4.301030018249996E-16, 0.0,
				-119.22761904772956, 5.000000000000006, 0.0, -142.61714284960914, -7.409708697309059E-16, 0.0,
				286.03428569916116, 2.732189474663471E-16, 0.0, -142.61714284960917, -3.122502256758253E-17, 0.0,
				-107.08285713612948, 2.5000000000000027, 0.0, 214.36571427223606, -3.0184188481996443E-16, 0.0,
				-107.08285713612949, -2.500000000000003, 0.0, -47.73904761653241, 2.5000000000000036, 0.0,
				95.07809523305909, -2.393918396847994E-16, 0.0, -47.73904761653241, -2.5000000000000036, 0.0
			},
			{
				-4.999999999999999, -238.1852380954976, 0.0, 3.537209587733958E-16, 476.07047619103815, 0.0,
				4.999999999999998, -238.18523809549765, 0.0, 4.933119884809045E-17, -285.59428569919254, 0.0,
				3.8424124992886277E-16, 571.5885713983567, 0.0, -4.744468706796567E-16, -285.59428569919265, 0.0,
				2.4999999999999996, -214.2557142722486, 0.0, -1.0408340855860843E-16, 428.6114285444858, 0.0,
				-2.5000000000000004, -214.25571427224864, 0.0, 2.5, -95.29809523306223, 0.0, -2.498001805406602E-16,
				190.39619046612162, 0.0, -2.5, -95.2980952330622, 0.0
			},
			{
				0.0, 0.0, -237.89535809553882, 0.0, 0.0, 475.79031619107803, 0.0, 0.0, -237.89535809553888, 0.0, 0.0,
				-285.98071236583155, 0.0, 0.0, 571.9622247316629, 0.0, 0.0, -285.9807123658316, 0.0, 0.0,
				-214.35250093890406, 0.0, 0.0, 428.70460187780833, 0.0, 0.0, -214.35250093890403, 0.0, 0.0,
				-95.10476189972607, 0.0, 0.0, 190.20952379945214, 0.0, 0.0, -95.10476189972607
			},
			{
				-119.10761904774655, -2.500000000000001, 0.0, -119.22761904772953, -5.000000000000003, 0.0,
				237.73523809556184, -7.500000000000005, 0.0, -142.77714284959762, -2.88560408207017E-16, 0.0,
				-142.61714284960917, -2.5240226575462543E-16, 0.0, 286.19428569914965, 6.453171330633722E-16, 0.0,
				-107.12285713612478, 1.2500000000000002, 0.0, -107.08285713612948, 2.5000000000000013, 0.0,
				214.40571427223134, 3.7500000000000036, 0.0, -47.65904761653119, 1.2500000000000002, 0.0,
				-47.73904761653242, 2.5000000000000004, 0.0, 94.99809523305791, 3.7500000000000036, 0.0
			},
			{
				-2.4999999999999996, -238.12523809550598, 0.0, -5.000000000000006, -238.18523809549768, 0.0,
				7.500000000000005, 476.0104761910465, 0.0, -1.3227266504323154E-16, -285.6742856991866, 0.0,
				-3.122502256758253E-17, -285.59428569919265, 0.0, 4.2327252813834093E-16, 571.6685713983507, 0.0, 1.25,
				-214.2757142722461, 0.0, 2.500000000000004, -214.2557142722486, 0.0, -3.750000000000004,
				428.6314285444833, 0.0, 1.2500000000000002, -95.25809523306152, 0.0, 2.500000000000005,
				-95.29809523306226, 0.0, -3.750000000000004, 190.35619046612092, 0.0
			},
			{
				0.0, 0.0, 119.24757904772665, 0.0, 0.0, -237.89535809553888, 0.0, 0.0, 118.64737904781246, 0.0, 0.0,
				142.59055618294428, 0.0, 0.0, -285.9807123658316, 0.0, 0.0, 143.390956182887, 0.0, 0.0,
				107.07615046946349, 0.0, 0.0, -214.35250093890403, 0.0, 0.0, 107.27595046944072, 0.0, 0.0,
				47.75238094986588, 0.0, 0.0, -95.10476189972611, 0.0, 0.0, 47.352380949860134
			},

			{
				94.99809523305785, 3.7500000000000036, 0.0, -47.739047616532375, 2.500000000000001, 0.0,
				-47.65904761653119, 1.2500000000000004, 0.0, 214.40571427223136, 3.750000000000003, 0.0,
				-107.08285713612945, 2.4999999999999996, 0.0, -107.12285713612475, 1.2499999999999998, 0.0,
				286.1942856991496, -1.3162214373974024E-15, 0.0, -142.6171428496091, -8.396061623727746E-16, 0.0,
				-142.7771428495976, -2.498001805406602E-16, 0.0, 237.73523809556178, -7.500000000000007, 0.0,
				-119.2276190477295, -5.000000000000001, 0.0, -119.10761904774655, -2.5000000000000004, 0.0
			},
			{
				-3.750000000000005, 190.3561904661209, 0.0, 2.500000000000003, -95.29809523306223, 0.0,
				1.2500000000000004, -95.25809523306152, 0.0, -3.7500000000000036, 428.6314285444833, 0.0,
				2.5000000000000027, -214.2557142722486, 0.0, 1.2500000000000002, -214.2757142722461, 0.0,
				-1.2051991349348867E-15, 571.6685713983507, 0.0, -3.3306690738754696E-16, -285.5942856991926, 0.0,
				2.740863092043355E-16, -285.67428569918656, 0.0, 7.500000000000003, 476.01047619104645, 0.0,
				-5.000000000000003, -238.18523809549768, 0.0, -2.4999999999999987, -238.12523809550595, 0.0
			},
			{
				0.0, 0.0, 47.35238094986012, 0.0, 0.0, -95.10476189972609, 0.0, 0.0, 47.752380949865874, 0.0, 0.0,
				107.2759504694407, 0.0, 0.0, -214.35250093890406, 0.0, 0.0, 107.07615046946349, 0.0, 0.0,
				143.39095618288698, 0.0, 0.0, -285.98071236583155, 0.0, 0.0, 142.5905561829443, 0.0, 0.0,
				118.64737904781246, 0.0, 0.0, -237.89535809553877, 0.0, 0.0, 119.24757904772659
			},
			{
				-47.73904761653238, -2.500000000000003, 0.0, 95.07809523305906, 8.304988641238964E-17, 0.0,
				-47.739047616532396, 2.500000000000003, 0.0, -107.08285713612945, -2.5000000000000036, 0.0,
				214.36571427223606, -2.220446049250313E-16, 0.0, -107.08285713612948, 2.500000000000004, 0.0,
				-142.6171428496091, -1.1102230246251565E-16, 0.0, 286.0342856991613, -9.43689570931383E-16, 0.0,
				-142.61714284960917, 8.881784197001252E-16, 0.0, -119.22761904772956, 5.000000000000007, 0.0,
				237.85523809554488, -8.326672684688674E-16, 0.0, -119.22761904772955, -5.000000000000007, 0.0
			},
			{
				-2.500000000000001, -95.2980952330622, 0.0, 1.3997050046787862E-16, 190.39619046612162, 0.0,
				2.5000000000000004, -95.29809523306223, 0.0, -2.5000000000000004, -214.2557142722486, 0.0,
				-1.8735013540549517E-16, 428.6114285444858, 0.0, 2.5000000000000004, -214.2557142722486, 0.0,
				-1.061650767297806E-15, -285.5942856991926, 0.0, -9.992007221626409E-16, 571.588571398357, 0.0,
				9.992007221626409E-16, -285.5942856991927, 0.0, 4.999999999999997, -238.18523809549768, 0.0,
				-4.440892098500626E-16, 476.0704761910384, 0.0, -4.999999999999996, -238.1852380954977, 0.0
			},
			{
				0.0, 0.0, -95.10476189972609, 0.0, 0.0, 190.20952379945203, 0.0, 0.0, -95.10476189972609, 0.0, 0.0,
				-214.35250093890406, 0.0, 0.0, 428.70460187780833, 0.0, 0.0, -214.35250093890403, 0.0, 0.0,
				-285.98071236583155, 0.0, 0.0, 571.9622247316629, 0.0, 0.0, -285.9807123658316, 0.0, 0.0,
				-237.89535809553888, 0.0, 0.0, 475.79031619107803, 0.0, 0.0, -237.89535809553885
			},
			{
				-47.65904761653119, -1.2500000000000004, 0.0, -47.739047616532396, -2.500000000000001, 0.0,
				94.99809523305787, -3.750000000000003, 0.0, -107.12285713612476, -1.25, 0.0, -107.08285713612948,
				-2.5000000000000004, 0.0, 214.40571427223134, -3.750000000000004, 0.0, -142.7771428495976,
				2.8102520310824275E-16, 0.0, -142.61714284960917, 7.771561172376096E-16, 0.0, 286.19428569914965,
				-3.552713678800501E-15, 0.0, -119.10761904774655, 2.5, 0.0, -119.22761904772966, 5.000000000000003, 0.0,
				237.7352380955619, 7.50000000000001, 0.0
			},
			{
				-1.2500000000000004, -95.25809523306152, 0.0, -2.5000000000000036, -95.29809523306223, 0.0,
				3.750000000000005, 190.3561904661209, 0.0, -1.2500000000000002, -214.2757142722461, 0.0,
				-2.500000000000003, -214.25571427224864, 0.0, 3.7500000000000044, 428.63142854448336, 0.0,
				-2.498001805406602E-16, -285.67428569918656, 0.0, 8.881784197001252E-16, -285.5942856991927, 0.0,
				-3.1086244689504383E-15, 571.6685713983508, 0.0, 2.499999999999999, -238.12523809550598, 0.0,
				5.000000000000008, -238.18523809549794, 0.0, -7.500000000000003, 476.0104761910467, 0.0
			},
			{
				0.0, 0.0, 47.752380949865874, 0.0, 0.0, -95.10476189972609, 0.0, 0.0, 47.35238094986012, 0.0, 0.0,
				107.07615046946349, 0.0, 0.0, -214.35250093890403, 0.0, 0.0, 107.27595046944072, 0.0, 0.0,
				142.5905561829443, 0.0, 0.0, -285.9807123658316, 0.0, 0.0, 143.39095618288707, 0.0, 0.0,
				119.24757904772672, 0.0, 0.0, -237.895358095539, 0.0, 0.0, 118.64737904781254
			},
			{
				23.689523808020375, 1.250000000000001, 0.0, -11.964761904017053, 0.8333333333333333, 0.0,
				-11.924761904014751, 0.41666666666666663, 0.0, 94.99809523305787, 3.7500000000000036, 0.0,
				-47.739047616532396, 2.5, 0.0, -47.65904761653119, 1.25, 0.0, 237.73523809556178, 7.500000000000003,
				0.0, -119.22761904772956, 4.999999999999997, 0.0, -119.10761904774655, 2.499999999999999, 0.0,
				476.9104762300271, -12.500000000000007, 0.0, -237.73523811505478, -8.33333333333333, 0.0,
				-237.97523811504078, -4.166666666666666, 0.0
			},
			{
				-1.250000000000001, 47.55904761605103, 0.0, 0.8333333333333343, -23.839523808028954, 0.0,
				0.41666666666666674, -23.819523808027782, 0.0, -3.7500000000000036, 190.3561904661209, 0.0,
				2.5000000000000036, -95.29809523306223, 0.0, 1.2500000000000002, -95.25809523306152, 0.0,
				-7.500000000000007, 476.01047619104645, 0.0, 5.000000000000007, -238.18523809549774, 0.0, 2.5,
				-238.12523809550595, 0.0, -12.500000000000007, 952.7409524601159, 0.0, 8.333333333333343,
				-476.0104762300789, 0.0, 4.166666666666665, -476.13047623007134, 0.0
			},
			{
				0.0, 0.0, 11.771508570672664, 0.0, 0.0, -23.742817141356753, 0.0, 0.0, 11.971441904017421, 0.0, 0.0,
				47.35238094986012, 0.0, 0.0, -95.10476189972607, 0.0, 0.0, 47.75238094986588, 0.0, 0.0,
				118.64737904781245, 0.0, 0.0, -237.89535809553888, 0.0, 0.0, 119.24757904772672, 0.0, 0.0,
				238.89539811498832, 0.0, 0.0, -476.59039623004537, 0.0, 0.0, 237.69526478172352
			},
			{
				-11.96476190401705, -0.8333333333333345, 0.0, 23.72952380802267, 6.418476861114186E-17, 0.0,
				-11.964761904017053, 0.8333333333333345, 0.0, -47.73904761653238, -2.500000000000004, 0.0,
				95.07809523305907, -5.551115123125783E-17, 0.0, -47.73904761653241, 2.5000000000000044, 0.0,
				-119.2276190477295, -5.000000000000003, 0.0, 237.85523809554488, -2.220446049250313E-16, 0.0,
				-119.22761904772968, 5.000000000000008, 0.0, -237.73523811505478, 8.333333333333343, 0.0,
				476.6704762300413, -3.552713678800501E-15, 0.0, -237.73523811505493, -8.333333333333343, 0.0
			},
			{
				-0.8333333333333335, -23.839523808028954, 0.0, 3.2526065174565133E-19, 47.5790476160522, 0.0,
				0.8333333333333337, -23.839523808028957, 0.0, -2.5000000000000004, -95.29809523306223, 0.0,
				-2.8796409701215E-16, 190.39619046612162, 0.0, 2.500000000000001, -95.29809523306226, 0.0, -5.0,
				-238.18523809549765, 0.0, -9.992007221626409E-16, 476.0704761910384, 0.0, 5.000000000000003,
				-238.18523809549794, 0.0, -8.33333333333333, -476.01047623007884, 0.0, -3.3306690738754696E-15,
				952.6209524601236, 0.0, 8.333333333333332, -476.01047623007906, 0.0
			},
			{
				0.0, 0.0, -23.742817141356753, 0.0, 0.0, 47.48576761604683, 0.0, 0.0, -23.742817141356753, 0.0, 0.0,
				-95.10476189972606, 0.0, 0.0, 190.20952379945214, 0.0, 0.0, -95.1047618997261, 0.0, 0.0,
				-237.89535809553877, 0.0, 0.0, 475.79031619107803, 0.0, 0.0, -237.895358095539, 0.0, 0.0,
				-476.59039623004537, 0.0, 0.0, 953.181059126757, 0.0, 0.0, -476.5903962300451
			},
			{
				-11.924761904014753, -0.41666666666666663, 0.0, -11.964761904017053, -0.8333333333333334, 0.0,
				23.689523808020375, -1.250000000000001, 0.0, -47.65904761653119, -1.25, 0.0, -47.73904761653239,
				-2.4999999999999996, 0.0, 94.99809523305791, -3.750000000000004, 0.0, -119.10761904774655,
				-2.4999999999999987, 0.0, -119.22761904772955, -4.9999999999999964, 0.0, 237.7352380955619,
				-7.500000000000003, 0.0, -237.97523811504078, 4.166666666666665, 0.0, -237.73523811505493,
				8.333333333333332, 0.0, 476.91047623002703, 12.500000000000005, 0.0
			},
			{
				-0.4166666666666668, -23.819523808027782, 0.0, -0.8333333333333344, -23.839523808028957, 0.0,
				1.250000000000001, 47.559047616051025, 0.0, -1.2500000000000002, -95.25809523306152, 0.0,
				-2.500000000000004, -95.2980952330622, 0.0, 3.7500000000000036, 190.35619046612092, 0.0,
				-2.5000000000000004, -238.12523809550592, 0.0, -5.000000000000007, -238.1852380954977, 0.0,
				7.50000000000001, 476.0104761910467, 0.0, -4.166666666666666, -476.13047623007134, 0.0,
				-8.333333333333343, -476.010476230079, 0.0, 12.500000000000005, 952.7409524601155, 0.0
			},
			{
				0.0, 0.0, 11.971441904017421, 0.0, 0.0, -23.742817141356753, 0.0, 0.0, 11.771508570672662, 0.0, 0.0,
				47.75238094986587, 0.0, 0.0, -95.10476189972609, 0.0, 0.0, 47.352380949860134, 0.0, 0.0,
				119.24757904772656, 0.0, 0.0, -237.89535809553885, 0.0, 0.0, 118.64737904781254, 0.0, 0.0,
				237.69526478172352, 0.0, 0.0, -476.5903962300451, 0.0, 0.0, 238.89539811498815
			}
		});

		private const double Tolerance = 1e-11;

		[Fact]
		private void TestNurbsKLShellsStiffnessMatrix()
		{
			var element = Element;

			var stiffnessMatrix = element.StiffnessMatrix(element);

			for (var i = 0; i < 36; i++)
			{
				for (var j = 0; j < 36; j++)
				{
					Assert.True(Utilities.AreValuesEqual(_expectedStiffnessMatrix[i, j], stiffnessMatrix[i, j],
						Tolerance));
				}
			}
		}

		[Fact]
		public void IsogeometricCantileverShell()
		{
			Model model = new Model();
			string filename = "..\\..\\..\\MGroup.IGA.Tests\\InputFiles\\CantileverShell.txt";
			IsogeometricShellReader modelReader = new IsogeometricShellReader(model, filename);
			modelReader.CreateShellModelFromFile(GeometricalFormulation.Linear);

			model.Loads.Add(new Load()
			{
				Amount = -1,
				Node = model.ControlPointsDictionary[9],
				DOF = StructuralDof.TranslationZ
			});
			model.Loads.Add(new Load()
			{
				Amount = -1,
				Node = model.ControlPointsDictionary[10],
				DOF = StructuralDof.TranslationZ
			});
			model.Loads.Add(new Load()
			{
				Amount = -1,
				Node = model.ControlPointsDictionary[11],
				DOF = StructuralDof.TranslationZ
			});

			for (int i = 0; i < 6; i++)
			{
				model.ControlPointsDictionary[i].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationX });
				model.ControlPointsDictionary[i].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationY });
				model.ControlPointsDictionary[i].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationZ });
			}

			// Solvers
			var solverBuilder = new SkylineSolver.Builder();
			ISolver solver = solverBuilder.BuildSolver(model);

			// Structural problem provider
			var provider = new ProblemStructural(model, solver);

			// Linear static analysis
			var childAnalyzer = new LinearAnalyzer(model, solver, provider);
			var parentAnalyzer = new StaticAnalyzer(model, solver, provider, childAnalyzer);

			// Run the analysis
			parentAnalyzer.Initialize();
			parentAnalyzer.Solve();

			var expectedSolution = new double[18]
			{
				0.0, 0.0, -7499.999986865148, 0.0, 0.0, -7499.99998660616, 0.0, 0.0, -7499.999986347174, 0.0, 0.0,
				-14999.999980230163, 0.0, 0.0, -14999.999980050825, 0.0, 0.0, -14999.999979871487
			};
			for (int i = 0; i < expectedSolution.Length; i++)
				Utilities.AreValuesEqual(expectedSolution[i], solver.LinearSystems[0].Solution[i], 7);
		}

		[Fact]
		public void ScordelisLoShell()
		{
			var model = new Model();
			var filename = "ScordelisLoShell";
			var filepath = $"..\\..\\..\\MGroup.IGA.Tests\\InputFiles\\{filename}.txt";
			var modelReader = new IsogeometricShellReader(model, filepath);
			modelReader.CreateShellModelFromFile(GeometricalFormulation.NonLinear);

			model.SurfaceLoads.Add(new SurfaceDistributedLoad(-90.0, StructuralDof.TranslationY));

			// Rigid diaphragm for AB
			for (var i = 0; i < 19; i++)
			{
				model.ControlPointsDictionary[i * 19].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationX });
				model.ControlPointsDictionary[i * 19].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationY });
			}

			// Symmetry for CD
			for (var i = 0; i < 19; i++)
			{
				model.ControlPointsDictionary[i * 19 + 18].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationZ });

				//model.ControlPointsDictionary[i * 19 + 17].Constrains.Add(new Constraint() { DOF = StructuralDof.TranslationZ });
				model.AddPenaltyConstrainedDofPair(new PenaltyDofPair(
					new NodalDof(model.ControlPointsDictionary[i * 19 + 18], StructuralDof.TranslationX),
					new NodalDof(model.ControlPointsDictionary[i * 19 + 17], StructuralDof.TranslationX)));
				model.AddPenaltyConstrainedDofPair(new PenaltyDofPair(
					new NodalDof(model.ControlPointsDictionary[i * 19 + 18], StructuralDof.TranslationY),
					new NodalDof(model.ControlPointsDictionary[i * 19 + 17], StructuralDof.TranslationY)));
			}

			// Symmetry for AD
			for (var j = 0; j < 19; j++)
			{
				model.ControlPointsDictionary[j].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationX });
				//model.ControlPointsDictionary[j + 19].Constrains.Add(new Constraint() { DOF = StructuralDof.TranslationX });
				model.AddPenaltyConstrainedDofPair(new PenaltyDofPair(
					new NodalDof(model.ControlPointsDictionary[j], StructuralDof.TranslationY),
					new NodalDof(model.ControlPointsDictionary[j + 19], StructuralDof.TranslationY)));
				model.AddPenaltyConstrainedDofPair(new PenaltyDofPair(
					new NodalDof(model.ControlPointsDictionary[j], StructuralDof.TranslationZ),
					new NodalDof(model.ControlPointsDictionary[j + 19], StructuralDof.TranslationZ)));
			}

			// Solvers
			var solverBuilder = new SkylineSolver.Builder();
			ISolver solver = solverBuilder.BuildSolver(model);

			// Structural problem provider
			var provider = new ProblemStructural(model, solver);

			// Linear static analysis
			var childAnalyzer = new LinearAnalyzer(model, solver, provider);
			var parentAnalyzer = new StaticAnalyzer(model, solver, provider, childAnalyzer);

			// Run the analysis
			parentAnalyzer.Initialize();
			parentAnalyzer.Solve();

			var loadVectorExpected = new double[]
			{
				0, -18.84340239, 0, -28.26510359, 0, -37.68680479, 0, -37.68680479, 0, -37.68680479, 0,
				-37.68680479, 0, -37.68680479, 0, -37.68680479, 0, -37.68680479, 0, -37.68680479, 0, -37.68680479,
				0, -37.68680479, 0, -37.68680479, 0, -37.68680479, 0, -37.68680479, 0, -28.26510359, 0,
				-18.84340239, 0, -9.421701197, 0, 0, -37.80628426, 0, 0, -56.70942639, 0, 0, -75.61256852, 0, 0,
				-75.61256852, 0, 0, -75.61256852, 0, 0, -75.61256852, 0, 0, -75.61256852, 0, 0, -75.61256852, 0, 0,
				-75.61256852, 0, 0, -75.61256852, 0, 0, -75.61256852, 0, 0, -75.61256852, 0, 0, -75.61256852, 0, 0,
				-75.61256852, 0, 0, -75.61256852, 0, 0, -56.70942639, 0, 0, -37.80628426, 0, 0, -18.90314213, 0, 0,
				-56.89365898, 0, 0, -85.34048847, 0, 0, -113.787318, 0, 0, -113.787318, 0, 0, -113.787318, 0, 0,
				-113.787318, 0, 0, -113.787318, 0, 0, -113.787318, 0, 0, -113.787318, 0, 0, -113.787318, 0, 0,
				-113.787318, 0, 0, -113.787318, 0, 0, -113.787318, 0, 0, -113.787318, 0, 0, -113.787318, 0, 0,
				-85.34048847, 0, 0, -56.89365898, 0, 0, -28.44682949, 0, 0, -76.12172724, 0, 0, -114.1825909, 0, 0,
				-152.2434545, 0, 0, -152.2434545, 0, 0, -152.2434545, 0, 0, -152.2434545, 0, 0, -152.2434545, 0, 0,
				-152.2434545, 0, 0, -152.2434545, 0, 0, -152.2434545, 0, 0, -152.2434545, 0, 0, -152.2434545, 0, 0,
				-152.2434545, 0, 0, -152.2434545, 0, 0, -152.2434545, 0, 0, -114.1825909, 0, 0, -76.12172724, 0, 0,
				-38.06086362, 0, 0, -76.52268466, 0, 0, -114.784027, 0, 0, -153.0453693, 0, 0, -153.0453693, 0, 0,
				-153.0453693, 0, 0, -153.0453693, 0, 0, -153.0453693, 0, 0, -153.0453693, 0, 0, -153.0453693, 0, 0,
				-153.0453693, 0, 0, -153.0453693, 0, 0, -153.0453693, 0, 0, -153.0453693, 0, 0, -153.0453693, 0, 0,
				-153.0453693, 0, 0, -114.784027, 0, 0, -76.52268466, 0, 0, -38.26134233, 0, 0, -76.85389006, 0, 0,
				-115.2808351, 0, 0, -153.7077801, 0, 0, -153.7077801, 0, 0, -153.7077801, 0, 0, -153.7077801, 0, 0,
				-153.7077801, 0, 0, -153.7077801, 0, 0, -153.7077801, 0, 0, -153.7077801, 0, 0, -153.7077801, 0, 0,
				-153.7077801, 0, 0, -153.7077801, 0, 0, -153.7077801, 0, 0, -153.7077801, 0, 0, -115.2808351, 0, 0,
				-76.85389006, 0, 0, -38.42694503, 0, 0, -77.11347927, 0, 0, -115.6702189, 0, 0, -154.2269585, 0, 0,
				-154.2269585, 0, 0, -154.2269585, 0, 0, -154.2269585, 0, 0, -154.2269585, 0, 0, -154.2269585, 0, 0,
				-154.2269585, 0, 0, -154.2269585, 0, 0, -154.2269585, 0, 0, -154.2269585, 0, 0, -154.2269585, 0, 0,
				-154.2269585, 0, 0, -154.2269585, 0, 0, -115.6702189, 0, 0, -77.11347927, 0, 0, -38.55673964, 0, 0,
				-77.2999743, 0, 0, -115.9499614, 0, 0, -154.5999486, 0, 0, -154.5999486, 0, 0, -154.5999486, 0, 0,
				-154.5999486, 0, 0, -154.5999486, 0, 0, -154.5999486, 0, 0, -154.5999486, 0, 0, -154.5999486, 0, 0,
				-154.5999486, 0, 0, -154.5999486, 0, 0, -154.5999486, 0, 0, -154.5999486, 0, 0, -154.5999486, 0, 0,
				-115.9499614, 0, 0, -77.2999743, 0, 0, -38.64998715, 0, 0, -77.41230409, 0, 0, -116.1184561, 0, 0,
				-154.8246082, 0, 0, -154.8246082, 0, 0, -154.8246082, 0, 0, -154.8246082, 0, 0, -154.8246082, 0, 0,
				-154.8246082, 0, 0, -154.8246082, 0, 0, -154.8246082, 0, 0, -154.8246082, 0, 0, -154.8246082, 0, 0,
				-154.8246082, 0, 0, -154.8246082, 0, 0, -154.8246082, 0, 0, -116.1184561, 0, 0, -77.41230409, 0, 0,
				-38.70615204, 0, 0, -77.44981979, 0, 0, -116.1747297, 0, 0, -154.8996396, 0, 0, -154.8996396, 0, 0,
				-154.8996396, 0, 0, -154.8996396, 0, 0, -154.8996396, 0, 0, -154.8996396, 0, 0, -154.8996396, 0, 0,
				-154.8996396, 0, 0, -154.8996396, 0, 0, -154.8996396, 0, 0, -154.8996396, 0, 0, -154.8996396, 0, 0,
				-154.8996396, 0, 0, -116.1747297, 0, 0, -77.44981979, 0, 0, -38.7249099, 0, 0, -77.41230409, 0, 0,
				-116.1184561, 0, 0, -154.8246082, 0, 0, -154.8246082, 0, 0, -154.8246082, 0, 0, -154.8246082, 0, 0,
				-154.8246082, 0, 0, -154.8246082, 0, 0, -154.8246082, 0, 0, -154.8246082, 0, 0, -154.8246082, 0, 0,
				-154.8246082, 0, 0, -154.8246082, 0, 0, -154.8246082, 0, 0, -154.8246082, 0, 0, -116.1184561, 0, 0,
				-77.41230409, 0, 0, -38.70615204, 0, 0, -77.2999743, 0, 0, -115.9499614, 0, 0, -154.5999486, 0, 0,
				-154.5999486, 0, 0, -154.5999486, 0, 0, -154.5999486, 0, 0, -154.5999486, 0, 0, -154.5999486, 0, 0,
				-154.5999486, 0, 0, -154.5999486, 0, 0, -154.5999486, 0, 0, -154.5999486, 0, 0, -154.5999486, 0, 0,
				-154.5999486, 0, 0, -154.5999486, 0, 0, -115.9499614, 0, 0, -77.2999743, 0, 0, -38.64998715, 0, 0,
				-77.11347927, 0, 0, -115.6702189, 0, 0, -154.2269585, 0, 0, -154.2269585, 0, 0, -154.2269585, 0, 0,
				-154.2269585, 0, 0, -154.2269585, 0, 0, -154.2269585, 0, 0, -154.2269585, 0, 0, -154.2269585, 0, 0,
				-154.2269585, 0, 0, -154.2269585, 0, 0, -154.2269585, 0, 0, -154.2269585, 0, 0, -154.2269585, 0, 0,
				-115.6702189, 0, 0, -77.11347927, 0, 0, -38.55673964, 0, 0, -76.85389006, 0, 0, -115.2808351, 0, 0,
				-153.7077801, 0, 0, -153.7077801, 0, 0, -153.7077801, 0, 0, -153.7077801, 0, 0, -153.7077801, 0, 0,
				-153.7077801, 0, 0, -153.7077801, 0, 0, -153.7077801, 0, 0, -153.7077801, 0, 0, -153.7077801, 0, 0,
				-153.7077801, 0, 0, -153.7077801, 0, 0, -153.7077801, 0, 0, -115.2808351, 0, 0, -76.85389006, 0, 0,
				-38.42694503, 0, 0, -76.52268466, 0, 0, -114.784027, 0, 0, -153.0453693, 0, 0, -153.0453693, 0, 0,
				-153.0453693, 0, 0, -153.0453693, 0, 0, -153.0453693, 0, 0, -153.0453693, 0, 0, -153.0453693, 0, 0,
				-153.0453693, 0, 0, -153.0453693, 0, 0, -153.0453693, 0, 0, -153.0453693, 0, 0, -153.0453693, 0, 0,
				-153.0453693, 0, 0, -114.784027, 0, 0, -76.52268466, 0, 0, -38.26134233, 0, 0, -76.12172724, 0, 0,
				-114.1825909, 0, 0, -152.2434545, 0, 0, -152.2434545, 0, 0, -152.2434545, 0, 0, -152.2434545, 0, 0,
				-152.2434545, 0, 0, -152.2434545, 0, 0, -152.2434545, 0, 0, -152.2434545, 0, 0, -152.2434545, 0, 0,
				-152.2434545, 0, 0, -152.2434545, 0, 0, -152.2434545, 0, 0, -152.2434545, 0, 0, -114.1825909, 0, 0,
				-76.12172724, 0, 0, -38.06086362, 0, 0, -56.89365898, 0, 0, -85.34048847, 0, 0, -113.787318, 0, 0,
				-113.787318, 0, 0, -113.787318, 0, 0, -113.787318, 0, 0, -113.787318, 0, 0, -113.787318, 0, 0,
				-113.787318, 0, 0, -113.787318, 0, 0, -113.787318, 0, 0, -113.787318, 0, 0, -113.787318, 0, 0,
				-113.787318, 0, 0, -113.787318, 0, 0, -85.34048847, 0, 0, -56.89365898, 0, 0, -28.44682949, 0, 0,
				-37.80628426, 0, 0, -56.70942639, 0, 0, -75.61256852, 0, 0, -75.61256852, 0, 0, -75.61256852, 0, 0,
				-75.61256852, 0, 0, -75.61256852, 0, 0, -75.61256852, 0, 0, -75.61256852, 0, 0, -75.61256852, 0, 0,
				-75.61256852, 0, 0, -75.61256852, 0, 0, -75.61256852, 0, 0, -75.61256852, 0, 0, -75.61256852, 0, 0,
				-56.70942639, 0, 0, -37.80628426, 0, 0, -18.90314213, 0, 0, -18.84340239, 0, 0, -28.26510359, 0, 0,
				-37.68680479, 0, 0, -37.68680479, 0, 0, -37.68680479, 0, 0, -37.68680479, 0, 0, -37.68680479, 0, 0,
				-37.68680479, 0, 0, -37.68680479, 0, 0, -37.68680479, 0, 0, -37.68680479, 0, 0, -37.68680479, 0, 0,
				-37.68680479, 0, 0, -37.68680479, 0, 0, -37.68680479, 0, 0, -28.26510359, 0, 0, -18.84340239, 0, 0,
				-9.421701197
			};

			var solutionVectorExpected = new double[]
			{
				-0.01262799, -0.005960881, -0.011144814, -0.012628062, -0.017872702, -0.033419011, -0.01256518,
				-0.035219904, -0.065967344, -0.012302185, -0.051798183, -0.097189909, -0.011896129, -0.067459626,
				-0.12679266, -0.011369294, -0.082103321, -0.154564142, -0.010738692, -0.09565277, -0.180338827,
				-0.010018224, -0.108048063, -0.20398237, -0.009219342, -0.119241598, -0.225384888, -0.008352803,
				-0.129194618, -0.244455549, -0.00742734, -0.137877263, -0.261119165, -0.006452608, -0.145260618,
				-0.275315008, -0.00543595, -0.151331883, -0.286989082, -0.004383531, -0.156059157, -0.296112582,
				-0.003313002, -0.159468117, -0.302645114, -0.002194657, -0.16150751, -0.30662246, -0.001138153,
				-0.162049869, -0.307559363, -0.000269494, -0.162079873, -0.307584417, -0.010847059, -0.005701106,
				-0.010835167, -0.010847152, -0.017093341, -0.03249011, -0.010797789, -0.03367983, -0.06413183,
				-0.010584114, -0.049530529, -0.094487289, -0.010247754, -0.064506537, -0.12327316, -0.009805532,
				-0.07851218, -0.150284238, -0.009271626, -0.091474007, -0.175358617, -0.00865774, -0.103334088,
				-0.198364316, -0.007974157, -0.114046112, -0.219192999, -0.007229672, -0.12357252, -0.237755212,
				-0.006433095, -0.131883858, -0.253976395, -0.005591111, -0.138952614, -0.267797156, -0.004712997,
				-0.144764675, -0.279162615, -0.003801195, -0.149291734, -0.288047015, -0.002872195, -0.152552443,
				-0.294403605, -0.001907669, -0.154509971, -0.298282648, -0.000969362, -0.155022804, -0.299184208,
				-0.000259224, -0.155066056, -0.299226361, -0.007694188, -0.005192226, -0.010201755, -0.00769418,
				-0.015566533, -0.030590033, -0.007663921, -0.03066357, -0.060377711, -0.007528679, -0.045090217,
				-0.088960528, -0.007308664, -0.058724992, -0.11607675, -0.007011809, -0.071482219, -0.141533765,
				-0.006646422, -0.083294427, -0.165176975, -0.006220282, -0.094107352, -0.186879153, -0.00574058,
				-0.103877476, -0.206535269, -0.005213729, -0.11256916, -0.224058204, -0.004646302, -0.120154265,
				-0.239375895, -0.004043171, -0.126607497, -0.252428814, -0.00341185, -0.131912456, -0.263166587,
				-0.00275355, -0.13604818, -0.271556629, -0.002081086, -0.139018702, -0.277564683, -0.001383428,
				-0.140814951, -0.281221696, -0.000696463, -0.14127713, -0.282077061, -0.00020779, -0.141330297,
				-0.282140876, -0.004036309, -0.004454667, -0.009201174, -0.0040363, -0.013354237, -0.027587945,
				-0.004023854, -0.026301454, -0.054451221, -0.003966272, -0.038681078, -0.080247287, -0.003868141,
				-0.050393704, -0.104746393, -0.003729699, -0.061365217, -0.127772314, -0.003552915, -0.071534706,
				-0.149179314, -0.00334062, -0.08085232, -0.168846055, -0.003096066, -0.089277743, -0.186671808,
				-0.002822545, -0.096778118, -0.202573103, -0.002523535, -0.103326995, -0.216480612, -0.002202144,
				-0.108901607, -0.22833683, -0.001862175, -0.113484728, -0.238093929, -0.001505773, -0.117059656,
				-0.24571591, -0.001138289, -0.119622436, -0.251176064, -0.000758735, -0.121176635, -0.254485042,
				-0.000380594, -0.121575817, -0.255279461, -0.000120376, -0.121633738, -0.255360417, -0.001301632,
				-0.003747134, -0.008151366, -0.001301615, -0.011232119, -0.024438108, -0.001300522, -0.022121577,
				-0.048234413, -0.001293652, -0.032547258, -0.07111297, -0.001277871, -0.04242979, -0.09287835,
				-0.001249956, -0.051704285, -0.113369671, -0.001208091, -0.060314532, -0.132448301, -0.001151665,
				-0.068213815, -0.149997336, -0.001080913, -0.075364305, -0.165919642, -0.000996559, -0.081735365,
				-0.180134881, -0.000899731, -0.087302242, -0.19257648, -0.000791592, -0.092043954, -0.203188969,
				-0.000673874, -0.095943808, -0.211926386, -0.000547459, -0.098986192, -0.218751205, -0.000415493,
				-0.101165603, -0.223639411, -0.000276921, -0.102485945, -0.226594457, -0.000140794, -0.102831134,
				-0.227322854, -4.21E-05, -0.10287958, -0.227398361, 0.000638772, -0.003081303, -0.007066155,
				0.000638783, -0.009235171, -0.021181955, 0.000632916, -0.018188317, -0.041804129, 0.000608253,
				-0.026775372, -0.061660545, 0.000571512, -0.034936292, -0.080593957, 0.000526943, -0.042615021,
				-0.098460551, 0.000478091, -0.049759596, -0.115128995, 0.000427569, -0.056325944, -0.130486497,
				0.000377146, -0.062278363, -0.144439169, 0.00032795, -0.067588102, -0.156909712, 0.000280661,
				-0.072232055, -0.16783411, 0.000235554, -0.076190728, -0.177159418, 0.000192761, -0.079448341,
				-0.18484065, 0.000151891, -0.081990142, -0.190841575, 0.000112986, -0.083809984, -0.19513696,
				7.43E-05, -0.08491268, -0.197734688, 3.77E-05, -0.085202171, -0.198381659, 1.05E-05, -0.085242467,
				-0.198450389, 0.001908545, -0.00246983, -0.005965623, 0.001908554, -0.007401312, -0.017879826,
				0.001898839, -0.014573922, -0.035275725, 0.001856491, -0.021466238, -0.052050864, 0.001789557,
				-0.028036738, -0.068089555, 0.001702063, -0.034238895, -0.083268651, 0.001597944, -0.040025767,
				-0.097466546, 0.001480643, -0.045356399, -0.110575861, 0.001353005, -0.050197398, -0.122506724,
				0.001217327, -0.054522004, -0.133185198, 0.001075462, -0.058308729, -0.142550411, 0.000928835,
				-0.061539738, -0.150551827, 0.000778694, -0.064200197, -0.157146818, 0.000625617, -0.066276933,
				-0.162300046, 0.000470985, -0.067763321, -0.165988362, 0.000313339, -0.068664771, -0.168219564,
				0.000157863, -0.068900822, -0.168779093, 4.78E-05, -0.068932663, -0.168839866, 0.002626336,
				-0.001923425, -0.00487286, 0.002626342, -0.005762685, -0.014600973, 0.002614994, -0.011341291,
				-0.028784195, 0.00256493, -0.016710633, -0.042477506, 0.002484234, -0.021845989, -0.05560825,
				0.002376191, -0.026711026, -0.068077856, 0.002244364, -0.031265097, -0.07977821, 0.002092222,
				-0.035471407, -0.090610157, 0.001922959, -0.039299584, -0.100489672, 0.001739396, -0.042725233,
				-0.109347508, 0.001544075, -0.045728824, -0.117126678, 0.001339058, -0.048294255, -0.123780065,
				0.001126479, -0.050408233, -0.129267917, 0.000907358, -0.052059177, -0.133557637, 0.00068445,
				-0.053241084, -0.136628051, 0.000455789, -0.05395822, -0.138486594, 0.000230019, -0.054144984,
				-0.138954567, 6.96E-05, -0.054169245, -0.139006349, 0.002905136, -0.001449378, -0.003811345,
				0.002905139, -0.004341165, -0.011415872, 0.0028937, -0.008534403, -0.022468913, 0.00284292,
				-0.01257438, -0.033144641, 0.002760194, -0.016450497, -0.043412624, 0.002647942, -0.020136577,
				-0.053201756, 0.002509013, -0.023599284, -0.062421358, 0.002346433, -0.026807102, -0.070984014,
				0.002163224, -0.029733533, -0.078814281, 0.001962258, -0.032357168, -0.085849513, 0.001746278,
				-0.034660797, -0.092038104, 0.001517673, -0.036630423, -0.097337354, 0.001278964, -0.038254497,
				-0.101711704, 0.001031609, -0.039523554, -0.105132154, 0.000778905, -0.040432247, -0.1075808,
				0.000519118, -0.040983981, -0.109063342, 0.000261963, -0.041126319, -0.109438159, 7.95E-05,
				-0.041143746, -0.109480354, 0.002851082, -0.001051044, -0.002803168, 0.002851084, -0.003146818,
				-0.0083908, 0.002840579, -0.00617456, -0.016462413, 0.002793769, -0.009091508, -0.024249763,
				0.002716986, -0.011897931, -0.031761817, 0.002611851, -0.014576916, -0.038956151, 0.002480426,
				-0.017102786, -0.045762615, 0.002325075, -0.01945003, -0.052108937, 0.002148347, -0.021596742,
				-0.057931203, 0.001952814, -0.023525035, -0.06317574, 0.00174109, -0.025220439, -0.067798003,
				0.001515535, -0.026671261, -0.071761093, 0.001278793, -0.027867975, -0.075034535, 0.001032456,
				-0.028803245, -0.077594153, 0.000780102, -0.029472841, -0.079425747, 0.000520144, -0.029879426,
				-0.080534462, 0.000262569, -0.029982927, -0.080815732, 7.98E-05, -0.029994516, -0.08084794,
				0.002562148, -0.000727966, -0.001867877, 0.002562149, -0.002178281, -0.005584427, 0.002553202,
				-0.004260566, -0.010883059, 0.002513238, -0.006263355, -0.015971729, 0.002447362, -0.008194405,
				-0.020894548, 0.002356555, -0.010044516, -0.025637244, 0.002242156, -0.011795265, -0.030151879,
				0.002105831, -0.01342729, -0.034383881, 0.001949513, -0.014923587, -0.038283487, 0.001775283,
				-0.016270113, -0.041808247, 0.001585366, -0.01745536, -0.044922464, 0.001381879, -0.01847006,
				-0.047596214, 0.001167273, -0.019306674, -0.049804909, 0.000943159, -0.019959928, -0.051529571,
				0.000712983, -0.020426805, -0.052760544, 0.000475547, -0.020709928, -0.053503651, 0.000240064,
				-0.020780497, -0.053692895, 7.30E-05, -0.020787273, -0.05371501, 0.002126896, -0.000476363,
				-0.001021886, 0.002126897, -0.001424199, -0.00304599, 0.002119817, -0.002771246, -0.005830954,
				0.002088149, -0.004061491, -0.008463577, 0.002035761, -0.005307043, -0.011018114, 0.001963153,
				-0.006504508, -0.013506417, 0.001871079, -0.007641739, -0.015902909, 0.001760569, -0.008705067,
				-0.018172033, 0.001632931, -0.009682243, -0.020279948, 0.001489662, -0.010563031, -0.022197223,
				0.001332474, -0.011338899, -0.023898483, 0.001163058, -0.012002913, -0.025361805, 0.000983491,
				-0.01254934, -0.0265687, 0.000795217, -0.012974544, -0.0275052, 0.000601348, -0.013276662,
				-0.028165865, 0.000401117, -0.013458774, -0.028559333, 0.000202479, -0.013502565, -0.028659714,
				6.16E-05, -0.013505618, -0.028671919, 0.001623414, -0.000289776, -0.000278267, 0.001623413,
				-0.000865214, -0.000814762, 0.00161827, -0.001669167, -0.001386396, 0.001595248, -0.002432764,
				-0.00184933, 0.001557041, -0.003169762, -0.002302661, 0.001503834, -0.003880648, -0.002781353,
				0.001435939, -0.004558214, -0.003280929, 0.00135387, -0.005193612, -0.003784811, 0.001258364,
				-0.005778769, -0.004275747, 0.001150349, -0.006306892, -0.00473831, 0.001030972, -0.006772189,
				-0.005158498, 0.000901425, -0.007169835, -0.005523072, 0.000763266, -0.007495607, -0.005819719,
				0.000617651, -0.00774692, -0.006038166, 0.000467167, -0.007922585, -0.006175635, 0.000311523,
				-0.008026329, -0.006243872, 0.000157164, -0.00804948, -0.006260885, 4.78E-05, -0.008049885,
				-0.006263685, 0.001118555, -0.000159752, 0.000353146, 0.001118558, -0.000475911, 0.001079853,
				0.001115224, -0.000904583, 0.002389942, 0.001100321, -0.001304979, 0.003776482, 0.001075533,
				-0.001690402, 0.005120536, 0.00104082, -0.002063431, 0.006367697, 0.000996212, -0.002420409,
				0.007503634, 0.000941819, -0.002756182, 0.008527271, 0.000877919, -0.003066002, 0.009439809,
				0.000804936, -0.003345889, 0.010242617, 0.000723485, -0.003592358, 0.010937949, 0.000634254,
				-0.003802395, 0.0115297, 0.000538236, -0.003973017, 0.012023976, 0.000436201, -0.004102203,
				0.012428288, 0.00033005, -0.004188553, 0.012747633, 0.000219923, -0.00423595, 0.012968743,
				0.000110812, -0.004244328, 0.013028283, 3.38E-05, -0.004243142, 0.013034023, 0.000667386, -7.65E-05,
				0.000865566, 0.000667381, -0.000226957, 0.002617231, 0.00066561, -0.000419377, 0.005455621,
				0.000657679, -0.000592762, 0.008347075, 0.000644403, -0.000758256, 0.011157788, 0.000625677,
				-0.000919159, 0.013817499, 0.000601311, -0.001074017, 0.016296249, 0.000571164, -0.001220241,
				0.018577659, 0.000535151, -0.001355431, 0.020648558, 0.000493303, -0.00147764, 0.022497296,
				0.000445794, -0.001585133, 0.024114619, 0.000392877, -0.001676327, 0.025494833, 0.00033503,
				-0.00174939, 0.026636454, 0.000272606, -0.001802663, 0.02754427, 0.000206723, -0.001834084,
				0.028228705, 0.000137641, -0.001845809, 0.028690408, 6.91E-05, -0.001845036, 0.028814433, 2.11E-05,
				-0.001843178, 0.028827281, 0.000313084, -2.93E-05, 0.001254774, 0.000313091, -8.62E-05, 0.003785266,
				0.000312484, -0.000150086, 0.007784622, 0.000309825, -0.000202145, 0.011821534, 0.000305367,
				-0.000250518, 0.015750543, 0.00029889, -0.000297994, 0.019489602, 0.000290146, -0.000344312,
				0.022996617, 0.000278779, -0.000388394, 0.026243163, 0.000264491, -0.000429287, 0.029204353,
				0.000247022, -0.000466287, 0.031857502, 0.000226237, -0.000498763, 0.03418324, 0.000202068,
				-0.000526169, 0.036166031, 0.000174624, -0.000547646, 0.03779559, 0.000143923, -0.000562376,
				0.039067775, 0.00011039, -0.000567893, 0.039998243, 7.39E-05, -0.000563126, 0.040617011, 3.70E-05,
				-0.000557565, 0.040795359, 1.13E-05, -0.000556025, 0.040813508, 8.68E-05, -7.30E-06, 0.001518881,
				8.68E-05, -2.13E-05, 0.004577121, 8.70E-05, -3.13E-05, 0.009365196, 8.76E-05, -3.59E-05,
				0.014180955, 8.87E-05, -3.90E-05, 0.018871311, 8.99E-05, -4.24E-05, 0.023345539, 9.10E-05,
				-4.62E-05, 0.027553917, 9.16E-05, -5.00E-05, 0.031459444, 9.11E-05, -5.37E-05, 0.035029037,
				8.91E-05, -5.70E-05, 0.038231936, 8.55E-05, -5.99E-05, 0.041040833, 7.98E-05, -6.23E-05,
				0.043431964, 7.20E-05, -6.42E-05, 0.045384463, 6.21E-05, -6.53E-05, 0.046878965, 5.00E-05,
				-6.54E-05, 0.047906472, 3.53E-05, -6.06E-05, 0.048542146, 1.79E-05, -5.58E-05, 0.048732802,
				5.52E-06, -5.52E-05, 0.048743199, 3.44E-05, -2.06E-06, 0.001610838, 3.44E-05, -5.47E-06,
				0.004854552, 3.47E-05, -7.92E-06, 0.009921879, 3.60E-05, -8.19E-06, 0.015014901, 3.83E-05,
				-8.23E-06, 0.019973838, 4.14E-05, -8.31E-06, 0.024708108, 4.47E-05, -8.58E-06, 0.029164309,
				4.80E-05, -8.91E-06, 0.033302861, 5.07E-05, -9.26E-06, 0.037087545, 5.24E-05, -9.58E-06,
				0.040484725, 5.27E-05, -9.86E-06, 0.043463956, 5.14E-05, -1.01E-05, 0.045998085, 4.82E-05,
				-1.03E-05, 0.048060185, 4.32E-05, -1.04E-05, 0.049623277, 3.64E-05, -1.09E-05, 0.050635862,
				2.73E-05, -1.12E-05, 0.051082973, 1.62E-05, -1.05E-05, 0.051157835, 4.30E-06, -9.52E-06,
				0.051206969, 3.45E-05, 0.001635574, 3.45E-05, 0.004927034, 3.47E-05, 0.010078814, 3.60E-05,
				0.01524819, 3.84E-05, 0.020282596, 4.14E-05, 0.025089571, 4.48E-05, 0.029615132, 4.80E-05,
				0.033818853, 5.07E-05, 0.037663692, 5.24E-05, 0.041115181, 5.27E-05, 0.044142012, 5.14E-05,
				0.046715943, 4.82E-05, 0.048808881, 4.32E-05, 0.05038693, 3.64E-05, 0.051412206, 2.73E-05,
				0.05170964, 1.64E-05, 0.051583222, 4.34E-06, 0.051539906,
			};

			var referenceSolution = 0.3024;

			var cp = model.ControlPointsDictionary.Values.Last();
			var dofA = model.GlobalDofOrdering.GlobalFreeDofs[cp, StructuralDof.TranslationY];

			var solution = solver.LinearSystems[0].Solution[dofA];

			for (int i = 0; i < solutionVectorExpected.Length; i++)
				Assert.True(Utilities.AreValuesEqual(loadVectorExpected[i], solver.LinearSystems[0].RhsVector[i],
					1e-6));
		}

		[Fact]
		public void ScordelisLoShellNL()
		{
			var model = new Model();
			var filename = "ScordelisLoShell";
			var filepath = Path.Combine(Directory.GetCurrentDirectory(),"InputFiles",$"{filename}.txt").ToString(CultureInfo.InvariantCulture);
			var modelReader = new IsogeometricShellReader(model, filepath);
			modelReader.CreateShellModelFromFile(GeometricalFormulation.NonLinear);

			model.SurfaceLoads.Add(new SurfaceDistributedLoad(-5000, StructuralDof.TranslationY));

			// Rigid diaphragm for AB
			for (var i = 0; i < 19; i++)
			{
				model.ControlPointsDictionary[i * 19].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationX });
				model.ControlPointsDictionary[i * 19].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationY });
			}

			// Symmetry for CD
			for (var i = 0; i < 19; i++)
			{
				model.ControlPointsDictionary[i * 19 + 18].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationZ });

				model.AddPenaltyConstrainedDofPair(new PenaltyDofPair(
					new NodalDof(model.ControlPointsDictionary[i * 19 + 18], StructuralDof.TranslationX),
					new NodalDof(model.ControlPointsDictionary[i * 19 + 17], StructuralDof.TranslationX)));
				model.AddPenaltyConstrainedDofPair(new PenaltyDofPair(
					new NodalDof(model.ControlPointsDictionary[i * 19 + 18], StructuralDof.TranslationY),
					new NodalDof(model.ControlPointsDictionary[i * 19 + 17], StructuralDof.TranslationY)));
			}

			// Symmetry for AD
			for (var j = 0; j < 19; j++)
			{
				model.ControlPointsDictionary[j].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationX });
				model.AddPenaltyConstrainedDofPair(new PenaltyDofPair(
					new NodalDof(model.ControlPointsDictionary[j], StructuralDof.TranslationY),
					new NodalDof(model.ControlPointsDictionary[j + 19], StructuralDof.TranslationY)));
				model.AddPenaltyConstrainedDofPair(new PenaltyDofPair(
					new NodalDof(model.ControlPointsDictionary[j], StructuralDof.TranslationZ),
					new NodalDof(model.ControlPointsDictionary[j + 19], StructuralDof.TranslationZ)));
			}

			// Solvers
			var solverBuilder = new SkylineSolver.Builder();
			ISolver solver = solverBuilder.BuildSolver(model);

			// Structural problem provider
			var provider = new ProblemStructural(model, solver);

			// Linear static analysis
			var newtonRaphsonBuilder = new LoadControlAnalyzer.Builder(model, solver, provider, 100);
			var childAnalyzer = newtonRaphsonBuilder.Build();
			var parentAnalyzer = new StaticAnalyzer(model, solver, provider, childAnalyzer);

			var logger = new TotalLoadsDisplacementsPerIncrementLog(model.PatchesDictionary[0], 100,
				model.ControlPointsDictionary.Values.Last(), StructuralDof.TranslationY, $"..\\..\\..\\MGroup.IGA.Tests\\OutputFiles\\ScordelisLog.txt");
			childAnalyzer.IncrementalLogs.Add(0, logger);

			// Run the analysis
			parentAnalyzer.Initialize();
			parentAnalyzer.Solve();

			var referenceSolution = 0.3024;

			var cp = model.ControlPointsDictionary.Values.Last();
			var dofA = model.GlobalDofOrdering.GlobalFreeDofs[cp, StructuralDof.TranslationY];
		}

		[Fact]
		public void IsogeometricSquareShell()
		{
			Model model = new Model();
			var filename = "SquareShell";
			string filepath = $"..\\..\\..\\MGroup.IGA.Tests\\InputFiles\\{filename}.txt";
			IsogeometricShellReader modelReader = new IsogeometricShellReader(model, filepath);
			modelReader.CreateShellModelFromFile(GeometricalFormulation.Linear);

			Matrix<double> loadVector =
				MatlabReader.Read<double>("..\\..\\..\\MGroup.IGA.Tests\\InputFiles\\SquareShell.mat", "LoadVector");

			for (int i = 0; i < loadVector.ColumnCount; i += 3)
			{
				var indexCP = i / 3;
				model.Loads.Add(new Load()
				{
					Amount = loadVector.At(0, i),
					Node = model.ControlPointsDictionary[indexCP],
					DOF = StructuralDof.TranslationX
				});
				model.Loads.Add(new Load()
				{
					Amount = loadVector.At(0, i + 1),
					Node = model.ControlPointsDictionary[indexCP],
					DOF = StructuralDof.TranslationY
				});
				model.Loads.Add(new Load()
				{
					Amount = loadVector.At(0, i + 2),
					Node = model.ControlPointsDictionary[indexCP],
					DOF = StructuralDof.TranslationZ
				});
			}

			foreach (var edge in model.PatchesDictionary[0].EdgesDictionary.Values)
			{
				foreach (var controlPoint in edge.ControlPointsDictionary.Values)
				{
					model.ControlPointsDictionary[controlPoint.ID].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationX });
					model.ControlPointsDictionary[controlPoint.ID].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationY });
					model.ControlPointsDictionary[controlPoint.ID].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationZ });
				}
			}

			// Solvers
			var solverBuilder = new SkylineSolver.Builder();
			ISolver solver = solverBuilder.BuildSolver(model);

			// Structural problem provider
			var provider = new ProblemStructural(model, solver);

			// Linear static analysis
			var childAnalyzer = new LinearAnalyzer(model, solver, provider);
			var parentAnalyzer = new StaticAnalyzer(model, solver, provider, childAnalyzer);

			// Run the analysis
			parentAnalyzer.Initialize();
			parentAnalyzer.Solve();

			//var paraview = new ParaviewNurbsShells(model, solver.LinearSystems[0].Solution, filename);
			//paraview.CreateParaview2DFile();

			Matrix<double> solutionVectorExpected =
				MatlabReader.Read<double>("..\\..\\..\\MGroup.IGA.Tests\\InputFiles\\SquareShell.mat", "SolutionVector");

			for (int i = 0; i < solutionVectorExpected.ColumnCount; i++)
				Assert.True(Utilities.AreValuesEqual(solutionVectorExpected.At(0, i), solver.LinearSystems[0].Solution[i],
					1e-9));
		}

		[Fact]
		public void IsogeometricSquareShellWithDistributedLoad()
		{
			var model = new Model();
			var filename = "SquareShell";
			var filepath = $"..\\..\\..\\MGroup.IGA.Tests\\InputFiles\\{filename}.txt";
			var modelReader = new IsogeometricShellReader(model, filepath);
			modelReader.CreateShellModelFromFile(GeometricalFormulation.Linear);

			model.SurfaceLoads.Add(new SurfaceDistributedLoad(-1, StructuralDof.TranslationZ));

			foreach (var edge in model.PatchesDictionary[0].EdgesDictionary.Values)
			{
				foreach (var controlPoint in edge.ControlPointsDictionary.Values)
				{
					model.ControlPointsDictionary[controlPoint.ID].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationX });
					model.ControlPointsDictionary[controlPoint.ID].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationY });
					model.ControlPointsDictionary[controlPoint.ID].Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationZ });
				}
			}

			// Solvers
			var solverBuilder = new SkylineSolver.Builder();
			ISolver solver = solverBuilder.BuildSolver(model);

			// Structural problem provider
			var provider = new ProblemStructural(model, solver);

			// Linear static analysis
			var childAnalyzer = new LinearAnalyzer(model, solver, provider);
			var parentAnalyzer = new StaticAnalyzer(model, solver, provider, childAnalyzer);

			// Run the analysis
			parentAnalyzer.Initialize();
			parentAnalyzer.Solve();

			var paraview = new ParaviewNurbsShells(model, solver.LinearSystems[0].Solution, filename);
			paraview.CreateParaview2DFile();

			Matrix<double> solutionVectorExpected =
				MatlabReader.Read<double>("..\\..\\..\\MGroup.IGA.Tests\\InputFiles\\SquareShell.mat", "SolutionVector");

			for (int i = 0; i < solutionVectorExpected.ColumnCount; i++)
				Assert.True(Utilities.AreValuesEqual(solutionVectorExpected.At(0, i), solver.LinearSystems[0].Solution[i],
					1e-9));
		}

		//[Fact]
		public void ThinCylinderShell()
		{
			var model = new Model();
			var filename = "ThinCylinderShell";
			var filepath = $"..\\..\\..\\MGroup.IGA.Tests\\InputFiles\\{filename}.txt";
			var modelReader = new IsogeometricShellReader(model, filepath);
			modelReader.CreateShellModelFromFile(GeometricalFormulation.Linear);

			foreach (var controlPoint in model.PatchesDictionary[0].EdgesDictionary[2].ControlPointsDictionary.Values)
			{
				controlPoint.Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationX });
				controlPoint.Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationY });
				controlPoint.Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationZ });
			}

			foreach (var controlPoint in model.PatchesDictionary[0].EdgesDictionary[3].ControlPointsDictionary.Values)
			{
				controlPoint.Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationX });
				controlPoint.Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationY });
				controlPoint.Constraints.Add(new Constraint() { DOF = StructuralDof.TranslationZ });
			}

			for (var i = 0; i < 31; i++)
			{
				model.AddPenaltyConstrainedDofPair(new PenaltyDofPair(
					new NodalDof(model.ControlPointsDictionary[i], StructuralDof.TranslationX),
					new NodalDof(model.ControlPointsDictionary[i + 1240], StructuralDof.TranslationX), 0.0));
				model.AddPenaltyConstrainedDofPair(new PenaltyDofPair(
					new NodalDof(model.ControlPointsDictionary[i], StructuralDof.TranslationY),
					new NodalDof(model.ControlPointsDictionary[i + 1240], StructuralDof.TranslationY), 0.0));
				model.AddPenaltyConstrainedDofPair(new PenaltyDofPair(
					new NodalDof(model.ControlPointsDictionary[i], StructuralDof.TranslationZ),
					new NodalDof(model.ControlPointsDictionary[i + 1240], StructuralDof.TranslationZ), 0.0));
			}

			model.SurfaceLoads.Add(new SurfacePressureLoad(10));

			// Solvers
			var solverBuilder = new SkylineSolver.Builder();
			ISolver solver = solverBuilder.BuildSolver(model);

			// Structural problem provider
			var provider = new ProblemStructural(model, solver);

			// Linear static analysis
			var childAnalyzer = new LinearAnalyzer(model, solver, provider);
			var parentAnalyzer = new StaticAnalyzer(model, solver, provider, childAnalyzer);

			// Run the analysis
			parentAnalyzer.Initialize();
			parentAnalyzer.Solve();

			var paraview = new ParaviewNurbsShells(model, solver.LinearSystems[0].Solution, filename);
			paraview.CreateParaview2DFile();

			Matrix<double> solutionVectorExpected =
				MatlabReader.Read<double>("..\\..\\..\\MGroup.IGA.Tests\\InputFiles\\SquareShell.mat", "SolutionVector");

			for (int i = 0; i < solutionVectorExpected.ColumnCount; i++)
				Assert.True(Utilities.AreValuesEqual(solutionVectorExpected.At(0, i), solver.LinearSystems[0].Solution[i],
					1e-9));
		}
	}
}
